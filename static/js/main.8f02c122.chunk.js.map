{"version":3,"sources":["componentsToolkit/Todos.module.scss","modulesToolkit/hooks.ts","modulesToolkit/todosSlice.ts","componentsToolkit/TodoInsert.tsx","componentsToolkit/TodoItem.tsx","componentsToolkit/TodoList.tsx","componentsToolkit/Todos.tsx","modulesToolkit/counterSlice.ts","componentsToolkit/Counter.tsx","App.tsx","reportWebVitals.ts","modulesToolkit/index.ts","index.tsx","App.module.scss"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","nextId","todosSlice","createSlice","name","initialState","reducers","addTodo","state","action","push","id","text","payload","done","toggleTodo","todo","find","removeTodo","filter","actions","selectTodos","todos","TodoInsert","onInsert","useState","setText","onSubmit","e","preventDefault","style","styles","placeholder","value","onChange","target","type","cx","classNames","bind","TodoItem","onToggle","onRemove","onClick","className","TodoList","length","ul","map","Todos","dispatch","counterSlice","count","increase","decrease","incrementByAmount","selectCount","counter","Counter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","counterReducer","todosReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f02c122.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Todos_text__1en56\",\"done\":\"Todos_done__1Sb6s\",\"removeButton\":\"Todos_removeButton__1y5Rj\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '.';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../modulesToolkit';\r\n\r\nexport type Todo = {\r\n  id: number;\r\n  text: string;\r\n  done: boolean;\r\n};\r\n\r\nexport type TodosState = Todo[];\r\n\r\nconst initialState = [] as TodosState;\r\nlet nextId = 1;\r\n\r\nconst todosSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n  reducers: {\r\n    addTodo: (state, action: PayloadAction<string>) => {\r\n      // Immer 라이브러리가 탑재되어 있기 때문에, push의 사용이 가능\r\n      state.push({ id: nextId++, text: action.payload, done: false });\r\n    },\r\n    toggleTodo: (state, action: PayloadAction<number>) => {\r\n      const todo = state.find(todo => todo.id === action.payload);\r\n      if (todo) todo.done = !todo.done;\r\n    },\r\n    removeTodo: (state, action: PayloadAction<number>) => {\r\n      return state.filter(todo => todo.id !== action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleTodo, removeTodo } = todosSlice.actions;\r\n\r\nexport const selectTodos = (state: RootState) => state.todos;\r\n\r\nexport default todosSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport styles from './Todos.module.scss';\r\n\r\ntype TodoInsertProps = {\r\n  onInsert: (text: string) => void;\r\n};\r\n\r\nfunction TodoInsert({ onInsert }: TodoInsertProps) {\r\n  const [text, setText] = useState('');\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setText(e.target.value);\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onInsert(text);\r\n    setText('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} style={styles}>\r\n      <input\r\n        style={styles}\r\n        placeholder='할 일을 입력하세요.'\r\n        value={text}\r\n        onChange={onChange}\r\n      />\r\n      <button style={styles} type='submit'>\r\n        등록\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport { Todo } from '../modulesToolkit/todosSlice';\r\nimport styles from './Todos.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\ntype TodoItemProps = {\r\n  todo: Todo;\r\n  onToggle: (id: number) => void;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nfunction TodoItem({ todo, onToggle, onRemove }: TodoItemProps) {\r\n  const handleToggle = () => onToggle(todo.id);\r\n  const handleRemove = () => onRemove(todo.id);\r\n\r\n  return (\r\n    <li>\r\n      <span onClick={handleToggle} className={cx('text', { done: todo.done })}>\r\n        {todo.text}\r\n      </span>\r\n      <span onClick={handleRemove} className={cx('removeButton')}>\r\n        (X)\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import TodoItem from '../componentsToolkit/TodoItem';\r\nimport { Todo } from '../modulesToolkit/todosSlice';\r\nimport styles from './Todos.module.scss';\r\n\r\ntype TodoListProps = {\r\n  todos: Todo[];\r\n  onToggle: (id: number) => void;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nfunction TodoList({ todos, onToggle, onRemove }: TodoListProps) {\r\n  if (todos.length === 0) return <p>등록된 항목이 없습니다.</p>;\r\n  return (\r\n    <ul className={styles.ul}>\r\n      {todos.map(todo => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import { useAppDispatch, useAppSelector } from '../modulesToolkit/hooks';\r\nimport {\r\n  addTodo,\r\n  removeTodo,\r\n  selectTodos,\r\n  toggleTodo,\r\n} from '../modulesToolkit/todosSlice';\r\nimport TodoInsert from './TodoInsert';\r\nimport TodoList from './TodoList';\r\n\r\nfunction Todos() {\r\n  const todos = useAppSelector(selectTodos);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onInsert = (text: string) => {\r\n    dispatch(addTodo(text));\r\n  };\r\n  const onToggle = (id: number) => {\r\n    dispatch(toggleTodo(id));\r\n  };\r\n  const onRemove = (id: number) => {\r\n    dispatch(removeTodo(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../modulesToolkit/index';\r\n\r\nexport interface CounterState {\r\n  count: number;\r\n}\r\n\r\nconst initialState = { count: 0 } as CounterState;\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increase: state => {\r\n      state.count += 1;\r\n    },\r\n    decrease: state => {\r\n      state.count -= 1;\r\n    },\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.count += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increase, decrease, incrementByAmount } = counterSlice.actions;\r\n\r\nexport const selectCount = (state: RootState) => state.counter.count;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\r\nimport {\r\n  decrease,\r\n  increase,\r\n  incrementByAmount,\r\n  selectCount,\r\n} from '../modulesToolkit/counterSlice';\r\nimport { useAppDispatch, useAppSelector } from '../modulesToolkit/hooks';\r\n\r\nfunction Counter() {\r\n  const count = useAppSelector(selectCount);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onIncrease = () => {\r\n    dispatch(increase());\r\n  };\r\n  const onDecrease = () => {\r\n    dispatch(decrease());\r\n  };\r\n  const onIncreaseBy = (diff: number) => {\r\n    dispatch(incrementByAmount(diff));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{count}</h1>\r\n      <button onClick={onIncrease}>+1</button>\r\n      <button onClick={onDecrease}>-1</button>\r\n      {/* 컴파일 과정에서 실행시키지 않기 위해 익명 함수 사용 */}\r\n      <button onClick={() => onIncreaseBy(5)}>+5</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\nimport styles from './App.module.scss';\nimport Todos from './componentsToolkit/Todos';\nimport Counter from './componentsToolkit/Counter';\n\nfunction App() {\n  return (\n    <>\n      <Counter />\n      <div className={styles.App}>\n        <h1>투두리스트</h1>\n        <Todos />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from './counterSlice';\r\n// todos 리듀서 추가하기\r\nimport todosReducer from './todosSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todos: todosReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './modulesToolkit/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1NMgS\"};"],"sourceRoot":""}